'use client';

import { useState, useRef, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { Plus } from 'lucide-react';
import AddTributeForm from './AddTributeForm';
import { useFocusTrap } from '@/hooks/useFocusTrap';

export default function AddTributeButton() {
  const [isExpanded, setIsExpanded] = useState(false);
  const [isMounted, setIsMounted] = useState(false);
  const [buttonPosition, setButtonPosition] = useState({ top: 0, left: 0, width: 0, height: 0 });
  const buttonRef = useRef<HTMLButtonElement>(null);
  const formRef = useRef<HTMLDivElement>(null);

  // SSR guard - only render portal after mount
  useEffect(() => {
    setIsMounted(true);
  }, []);

  // Focus trap for accessibility
  useFocusTrap(formRef, isExpanded);

  // Capture button position when clicked
  const handleExpand = () => {
    if (buttonRef.current) {
      const rect = buttonRef.current.getBoundingClientRect();
      setButtonPosition({
        // position: fixed uses viewport coordinates, no scrollY needed
        top: rect.top,
        left: rect.left,
        width: rect.width,
        height: rect.height,
      });
    }
    setIsExpanded(true);
    // Do NOT prevent body scroll - 바깥 페이지 스크롤 허용
    // document.body.style.overflow = 'hidden'; // 제거
  };

  const handleClose = () => {
    setIsExpanded(false);
    // No need to restore - 스크롤을 막지 않았으므로
    // document.body.style.overflow = ''; // 제거
  };

  // Handle Escape key to close
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isExpanded) {
        handleClose();
      }
    };

    if (isExpanded) {
      document.addEventListener('keydown', handleEscape);
      // Focus the form container for accessibility
      formRef.current?.focus();
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isExpanded]);

  return (
    <>
      {/* Original Button */}
      <button
        ref={buttonRef}
        onClick={handleExpand}
        className="border-2 border-dashed border-gray-300 hover:border-gray-400 rounded-lg p-6 transition-all duration-300 bg-white hover:bg-gray-50 flex flex-col items-center justify-center text-center min-h-[200px] group w-full"
        aria-label="Góp kỷ niệm"
        aria-expanded={isExpanded}
      >
        <div className="mb-3 p-3 rounded-full bg-gray-100 group-hover:bg-gray-200 transition-colors">
          <Plus className="w-6 h-6 text-gray-600" />
        </div>
        <p className="text-sm font-medium text-gray-700 mb-1">
          Góp kỷ niệm
        </p>
        <p className="text-xs text-gray-500">
          Chia sẻ ảnh, câu chuyện, lời tưởng nhớ của bạn
        </p>
      </button>

      {/* Expanded Form Overlay - Rendered via Portal to document.body */}
      {isExpanded && isMounted && createPortal(
        <>
          {/* Backdrop - Blurs entire screen including navigation */}
          <div
            className="fixed inset-0 backdrop-blur-sm z-[99999] animate-fadeIn"
            onClick={handleClose}
            aria-hidden="true"
          />

          {/* Form Container - Centered on both mobile and desktop */}
          <div
            ref={formRef}
            className="fixed z-[100000] animate-expandForm"
            style={{
              '--button-top': `${buttonPosition.top}px`,
              '--button-left': `${buttonPosition.left}px`,
              '--button-width': `${buttonPosition.width}px`,
              '--button-height': `${buttonPosition.height}px`,
            } as React.CSSProperties}
            role="dialog"
            aria-modal="true"
            aria-labelledby="tribute-form-title"
            tabIndex={-1}
          >
            <AddTributeForm onClose={handleClose} />
          </div>
        </>,
        document.body
      )}
    </>
  );
}
